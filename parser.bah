parseCmd(s string*, id int) {
    isFuncDecl = false
    
    tokens = lexer(s.str(), s.length)

    if len(tokens) == 0 {
        return
    }

    i=0; for i < len(tokens), i++ {
        if tokens[i].ogCont == ";" {
            println("[error]: multi-line operations are not supported.")
            return
        }
    }

    if tokens[0].ogCont == "." {
        if len(tokens) < 2 {
            return
        }
        if tokens[1].ogCont == "i" || tokens[1].ogCont == "include" {
            f = ""
            i=2; for i < len(tokens), i++ {
                f += tokens[i].ogCont
            }
            includes += "#include \"" + f + "\"\n"
        } else if tokens[1].ogCont == "s" || tokens[1].ogCont == "save" {
            currentFile[len(currentFile)-1] = ""
            if len(tokens) > 2 {
                f = ""
                i=2; for i < len(tokens), i++ {
                    f += tokens[i].ogCont
                }
                currentFileName = f
            }

            if currentFileName == "" {
                println("[error]: no file name")
                return
            }

            fs = fileStream{}
            fs.open(currentFileName, "w")
            
            i=0; for i < len(currentFile), i++ {
                fs.writeFile(currentFile[i]+"\n")
            }

            fs.close()

        } else if tokens[1].ogCont == "o" || tokens[1].ogCont == "open" {
            currentFile[len(currentFile)-1] = ""
            f = ""
            i=2; for i < len(tokens), i++ {
                f += tokens[i].ogCont
            }
            if f == "" {
                println("[error]: no file name")
                return
            }
            currentFileName = f

            fs = fileStream{}
            fs.open(currentFileName, "r")

            clear(currentFile)

            file = fs.readBytes()

            nbEncls = 0
            start = 0
            i=0; for i < len(file), i++ {
                c = file[i]
                if c == '{' || c == '(' || c == '[' {
                    nbEncls++
                } else if c == '}' || c == ')' || c == ']' {
                    nbEncls--
                }
                
                if c == <char>10 && nbEncls == 0 {
                    currentFile[len(currentFile)] = arrToStr(file[start:i])
                    start = i+1
                }
            }
            

            fs.close()

            //reset state
            currFile = ""
            includes = "#include \"../runtime.bah\"\n"
            garbageFiles = listFiles("./tmp")
            i=0; for i < len(garbageFiles), i++ {
                removeFile("./tmp/"+garbageFiles[i])
            }
            clear(garbageFiles)
            clear(symsToSave)

            i=0; for i < len(currentFile), i++ {
                ls = string(currentFile[i])
                if ls.length == 0 {
                    continue
                }
                println(lineColor+"$"+intToStr(i)+" > "+asciiReset+syntaxHighlight(strToArr(currentFile[i])))
                parseCmd(&ls, i)
            }

            *globalID = i-1
            
        }

        return
    }

    if tokens[0].ogCont == "#include" || tokens[0].ogCont == "#import" {
        includes += "#include " + tokens[1].ogCont + "\n"
        return
    }

    if s.charAt(0) == '$' {
        if len(tokens) != 1 || tokens[0].type != TOKEN_TYPE_INT {
            return
        }
        nb = strToInt(tokens[0].ogCont)
        if nb < 0 || nb >= id {
            return
        }
        compileCmd("fn_"+intToStr(nb)+"()", id)
        return
    }

    if tokens[0].type == TOKEN_TYPE_VAR {
        varDecl = true
        funcDecl = false
        i=1; for i < len(tokens), i++ {
            if tokens[i].ogCont == "=" {
                break
            }
            if tokens[i].ogCont == "(" {
                varDecl = false
                if tokens[len(tokens)-1].ogCont == "}" {
                    funcDecl = true
                    break
                }
            }
        }

        if varDecl == true {
            vName = tokens[0].ogCont
            if vName[0] == '&' {
                vName = vName[1:]
            }
            j=0; for j < len(symsToSave), j++ {
                v = symsToSave[j]
                if v.name == vName {
                    compileCmd(s.str(), id)
                    break
                }
            }
            if j < len(symsToSave) {
                return
            }
            symsToSave[len(symsToSave)] = new symMapper {
                name: vName
                p: null
            }
            currFile += s.str()+"\n"
            compileCmd(s.str(), id)
            return
        }
        
        if funcDecl == true {
            isFuncDecl = true
        }

    }

    compileCmd(s.str(), id)

}