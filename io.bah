//The terminal (for advanced handling such as setting cursor pos)
t = term()

//Console text history (arrow up)
history = []cpstring

//Wrapper to a shared object for counting references (with symbols)
//to be able to close them and save ressources.
struct sharedObject {
    refs: int = 0
    path: cpstring
    so: ptr
}

//List of all shared object used by the program
so = []sharedObject*

//Current text output to be compiled
currFile = ""

//To map a name to a symbol (variable)
struct symMapper {
    name: cpstring
    scope: sharedObject*
    p: ptr*
}

symsToSave = []symMapper* //all variables

const baseIncludes = "#include \"iostream.bah\"\n#include \"string.bah\"\n"

includes = baseIncludes //files included

isFuncDecl = false //is current command a function declaration
currFuncName = "" //not used for now

//Used for compiling a command
compileCmd(code cpstring, id int) {
    fs = fileStream{}
    fs.open("./tmp/tmp.bah", "w")
    
    if isFuncDecl == false {
        code = "fn_"+intToStr(id)+"() {
            "+code+"
        }\n"
    }
    
    currFile += code+"\n"

    fs.writeFile("
    "+includes+"
    main(args []cpstring) int {
        return 0
    }
    "+currFile+"
    
    ")
    fs.close()

    bc = command("bah ./tmp/tmp.bah -c")
    bc.runBytes()
    print(".")

    if bc.status != 0 {
        println("ERROR: compilling (1)...")
        currFile = currFile[:len(currFile) - len(code)-1]
        return
    }

    command("gcc -I \"/opt/bah/libs/linux/include/\" -L \"/opt/bah/libs/linux/\" -w ./tmp/tmp.c -c -O0 -fpic -o ./tmp/tmp.o").runBytes()
    print(".")
    
    command("gcc ./tmp/tmp.o -lgc -o ./tmp/tmp_"+intToStr(id)+".so -shared").runBytes()
    print(".\r")
        i=0; for i < len(so), i++ {
            cso = so[i]
            if cso.refs == 0 {
                dlclose(cso.so)
                removeFile(cso.path)
                delete(so, i)
                i--
            }
        }
        
        currSo = new sharedObject {
            refs: 0
            so: dlopen(absPath("./tmp/tmp_"+intToStr(id)+".so"), noCheck(RTLD_LAZY | RTLD_GLOBAL))
            path: "./tmp/tmp_"+intToStr(id)+".so"
        }
        so[len(so)] = currSo
    if so[len(so)-1].so == null {
        delete(so, len(so)-1)
        println("ERROR: loading binary file.")
        return
    }
    
    i=0; for i < len(symsToSave), i++ {
        sts = symsToSave[i]
        if sts.p == null {
            sts.p = dlsym(so[len(so)-1].so, sts.name)
            sts.scope = currSo
            currSo.refs += 1
            continue 
        }
        np ptr* = dlsym(so[len(so)-1].so, sts.name)
        op = sts.p
        *np = *op
        sts.scope.refs -= 1
        sts.p = np
        sts.scope = currSo
        currSo.refs += 1
    }

    print("   \r")
    if isFuncDecl == false {
        sym function() = dlsym(so[len(so)-1].so, "fn_"+intToStr(id))

        if sym == null {
            println("ERROR: compilling (2)...")
            currFile = currFile[:len(currFile) - len(code)-1]
            return
        }

        sym()
    }
    print("\n")

}

#define countEnclaves(s [][]char) int
#define countFrom(s [][]char, s1 cpstring, s2 cpstring) int

//Used instead of stdinput() to be able to have syntax highlighting
getInputLine(info cpstring) cpstring {
    clear(cmdRaw)
    cmdRaw[0] = []char
    t.mode(0)
    padding = ""
    maxL = 0
    paddingOffset = 0
    l = len(info)
    historyIndex = len(history)
    pos = 0
    vertPos = 0
    t.forcePos(0, t.height-1)
    for 1==1 {
        if len(cmdRaw[vertPos]) > maxL {
            maxL = len(cmdRaw[vertPos])
        }
        padding = ""
        j=0; for j < maxL+paddingOffset, j++ {
            padding += " "
        }
        t.forcePos(l, t.height - len(cmdRaw)+vertPos)
        print("\r"+lineColor+info+asciiReset+syntaxHighlight(cmdRaw[vertPos])+padding)
        t.forcePos(l + pos, t.height - len(cmdRaw)+vertPos)
        k = inp()
        if testKS(k, K_enter) {
            nbEncl = countEnclaves(cmdRaw)
            print("\r\n")
            if nbEncl == 0 {
                break
            } else {
                vertPos++
                if cmdRaw[vertPos] == null {
                    cmdRaw[vertPos] = []char
                    pos = 0
                }
            }
            
        } else if testKS(k, K_del) {
            if len(cmdRaw) == 0 || pos == 0 {
                continue
            }
            paddingOffset++
            padding += " "
            delete(cmdRaw[vertPos], pos-1)
            pos--
        } else if testKS(k, K_arr_top) || testKS(k, K_arr_bottom) {
            if len(cmdRaw) == 1 {
                if testKS(k, K_arr_top) && historyIndex > 0 {
                    if historyIndex == len(history) && len(cmdRaw[0]) > 0 {
                        history[len(history)] = arrToStr(cmdRaw[0])
                    }
                    historyIndex--
                    cmdRaw[0] = strToArr(history[historyIndex])
                } else if testKS(k, K_arr_bottom)&& historyIndex < len(history) {
                    historyIndex++
                    cmdRaw[0] = strToArr(history[historyIndex])
                }
            } else {
                if testKS(k, K_arr_top) && vertPos > 0 {
                    vertPos--
                } else if testKS(k, K_arr_bottom) && vertPos+1 < len(cmdRaw) {
                    vertPos++
                }
                if pos > len(cmdRaw[vertPos]) {
                    pos = len(cmdRaw[vertPos])
                }
            }

        } else if testKS(k, K_arr_left) {
            if pos > 0 {
                pos--
            } else if vertPos > 0 {
                vertPos--
                pos = len(cmdRaw[vertPos])
            }
        } else if testKS(k, K_arr_right) {
            if pos < len(cmdRaw[vertPos]) {
                pos++
            } else if vertPos+1 < len(cmdRaw) {
                vertPos++
                pos = 0
            }
        } else {
            if cmdRaw[vertPos] == null {
                cmdRaw[vertPos] = []char
            }
            if pos == len(cmdRaw[vertPos]) {
                cl = cmdRaw[vertPos]
                cl[len(cl)] = k[0]
            } else {
                cl = cmdRaw[vertPos]
                i=len(cl); for i >= pos, i-- {
                    cl[i] = cl[i-1]
                }
                cl[pos] = k[0]
            }
            pos++
            if paddingOffset > 0 {
                paddingOffset--
            }
        }
    }
    t.mode(1)
    r = ""
    i=0; for i < len(cmdRaw), i++ {
        s = arrToStr(cmdRaw[i])
        history[len(history)] = s
        r += s
        if i+1 < len(cmdRaw) {
            r += "\n"
        }
    }
    return r 
}