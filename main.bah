#import "iostream.bah"
#import "string.bah"
#import "path.bah"
#import "exec.bah"
#import "flags.bah"

globalID int*

#include "lexer.bah"    //Bah compiler's lexer
#include "colors.bah"   //syntax highlighting
#include "terminal.bah" //terminal handling
#include "bindings.bah" // lib dl bindings

cmdRaw = [][]char //current command buffer
multiLine = false
currentFile = []cpstring //for saving
currentFileName = ""
CC = "gcc"

#include "io.bah" //io operations (compiling)
#include "parser.bah"    //Bah compiler's lexer

main(args []cpstring) int {
    t.mode(1)
    
    flags = flags{}
    flags.addString("CC", "C compiler (default: "+CC+").")
    flags.parse(args)

    if flags.isSet("CC") {
        CC = flags.get("CC")
    } else {

    }

    mkdir("./tmp", 0777)

    nbEncls = 0

    i=0
    
    globalID = &i

    t.mode(0)
    for 1==1, i++ {
        info = "... > "
        if multiLine == false {
            isFuncDecl = false
            info = "$"+intToStr(i)+" > "
        }
        
        cmd = string(getInputLine(info))
        
        if cmd.str() == ".q" || cmd.str() == ".quit" {
            break
        }

        currentFile[len(currentFile)] = cmd.str()

        parseCmd(&cmd, i)

    }

    garbageFiles = listFiles("./tmp")
    i=0; for i < len(garbageFiles), i++ {
        removeFile("./tmp/"+garbageFiles[i])
    }

    println("Good bye!")



    return 0
}